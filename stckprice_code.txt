import numpy as np
import pandas as pd
import random 
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

np.random.seed(42) --synthetic stock data
num_rows=1000


dates=pd.date_range(start='2020-01-01', periods=num_rows,freq='D')
data=pd.DataFrame(index=dates)





data['Open']=np.random.lognormal(100,10,size=num_rows) --generating open prices

data['High']=data['Open']+np.random.lognormal(150,5,size=num_rows) --high price which is open+random upto 10

data['Low']=data['Open']-np.random.lognormal(70,20,size=num_rows)

data['Close']=data['Low']+np.random.uniform(0,data['High']-data['Low']) --

data['Volume']=np.random.randint(10000,50000,size=num_rows) --genrate random b/w 10k-50k

data['Target']=data['Close'].shift(-1)   --nxt day close price
data=data.dropna() --drop last column with nan 



X=data[[333   --features preparation
y=data['Target']  --trgte vriabe

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)  -splitting of data

model=XGRegressor(objective='reg:squarederror',n_estimators=100,learning_rate=0.1,max_depth=5)

model.fit(X_train,y_train)

y_pred=model.predict(X_test)
mse=mean_squared_error(y_test,y_pred)   --predictions&evalution
Print(f"Mean squared Error:{mse:.2f})  

plt.figure(figsize=(12,6))
plt.plot(y_test.values,label='Actual', linewidth=2)  
plt.plot(y_pred.values,label='Predicted', linewidth=2)  
plt.title("Stock closing price Prediction")
plt.xlabel("Days")
plt.ylabel("ClosePrice")
plt.show()
 

 


  





